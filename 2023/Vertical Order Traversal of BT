/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, map<int, multiset<int> >> nodes;
        //to store nodes with verti index
        //level or horiz index
        //and nodes->val
            
        queue <pair <TreeNode*, pair<int, int> >> q;
        //to store the data and traverse mainly
        vector<vector<int>> res;
        
        q.push({root, {0,0}});
        
        while(!q.empty()){
            TreeNode* node = q.front().first; 
            int x=q.front().second.first;
            int y=q.front().second.second;
            q.pop();
            
            nodes[x][y].insert(node->val);
            
            if(node->left) q.push({node->left, {x-1, y+1}});
            
            if(node->right) q.push({node->right, make_pair(x+1, y+1)});
            
        }
        
        for(auto i:nodes){
            vector<int> col;
            for(auto j: i.second){
                col.insert(col.end(), j.second.begin(), j.second.end()); //says ki insert all the eles present in same level from the multiset from behind in col array.
            }
            res.push_back(col);
        }
        return res;
    }
};
